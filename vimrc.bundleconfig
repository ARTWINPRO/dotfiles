"===============================================================================
" Plugin Config
"===============================================================================

" ag.vim
if isdirectory(expand("~/.vim/bundle/ag.vim"))
    " Start searching from project root rather than cwd
    let g:ag_working_path_mode="r"
endif

" airline
if isdirectory(expand("~/.vim/bundle/vim-airline"))

    set laststatus=2 " Show status line for all windows
    set noshowmode   " Remove duplicate mode indicator

    let g:airline_powerline_fonts = 1

    "let g:airline_theme='jess'
    "let g:airline_theme='tomorrowjess'

    " Enable the list of tabs
    " Automatically displays all buffers when there's only one tab open.
    let g:airline#extensions#tabline#enabled = 1

    " Show just the filename
    let g:airline#extensions#tabline#fnamemod = ':t'

    let g:airline#extensions#tabline#buffer_nr_show = 1

    let g:airline#extensions#whitespace#enabled = 1
    let g:airline#extensions#whitespace#mixed_indent_algo = 0
    let g:airline#extensions#whitespace#symbol = '!'
    let g:airline#extensions#whitespace#checks = [ 'indent', 'trailing' ]
    let g:airline#extensions#whitespace#show_message = 1

    let g:airline#extensions#tagbar#enabled = 0

endif


" CamelCaseMotion
if isdirectory(expand("~/.vim/bundle/CamelCaseMotion"))

    " Replace the default 'w', 'b' and 'e' mappings instead of defining additional mappings ',w', ',b' and ',e'
    "map <silent> w <Plug>CamelCaseMotion_w
    "map <silent> b <Plug>CamelCaseMotion_b
    "map <silent> e <Plug>CamelCaseMotion_e
    "sunmap w
    "sunmap b
    "sunmap e

    " Replace default 'iw' text-object and define 'ib' and 'ie' motions
    "omap <silent> iw <Plug>CamelCaseMotion_iw
    "xmap <silent> iw <Plug>CamelCaseMotion_iw
    "omap <silent> ib <Plug>CamelCaseMotion_ib
    "xmap <silent> ib <Plug>CamelCaseMotion_ib
    "omap <silent> ie <Plug>CamelCaseMotion_ie
    "xmap <silent> ie <Plug>CamelCaseMotion_ie

endif

" closetag
if isdirectory(expand("~/.vim/bundle/vim-closetag"))
    let g:closetag_filenames = "*.html,*.xhtml,*.phtml,*.php"
endif

" CtrlP {{{
"===============================================================================
if executable('ag')
    let g:ctrlp_user_command = 'ag %s -g "" --hidden --nocolor'
    let g:ctrlp_use_caching = 0
elseif executable('ack-grep')
    let g:ctrlp_user_command = 'ack-grep %s --nocolor -f'
elseif executable('ack')
    let g:ctrlp_user_command = 'ack %s --nocolor -f'
else
    let g:ctrlp_user_command = 'find %s -type f'
endif

let g:ctrlp_map = ''
" }}}

" easytags
if isdirectory(expand("~/.vim/bundle/vim-easytags"))
    let g:easytags_dynamic_files = 1
endif

" Hardtime
if isdirectory(expand("~/.vim/bundle/vim-hardtime/"))
    let g:hardtime_default_on = 0
    let g:hardtime_showmsg = 1
    let g:hardtime_allow_different_key = 1
    let g:hardtime_maxcount = 4
endif

" GitGutter
if isdirectory(expand("~/.vim/bundle/vim-gitgutter"))
    let g:gitgutter_max_signs=1000
endif

" greplace.vim
if isdirectory(expand("~/.vim/bundle/greplace.vim"))
    set grepprg=ag
    let g:grep_cmd_opts = '--line-numbers --noheading'
endif

" indentLine
if isdirectory(expand("~/.vim/bundle/indentLine"))
    let g:indentLine_faster = 1
    let g:indentLine_char = '┊'
    let g:indentLine_first_char = '┊'
    let g:indentLine_color_term = 237
    "let g:indentLine_leadingSpaceEnabled = 1
    "let g:indentLine_leadingSpaceChar = '·'
    let g:indentLine_showFirstIndentLevel = 1
endif

" neocomplete
if isdirectory(expand("~/.vim/bundle/neocomplete"))

    let g:neocomplete#enable_at_startup = 1
    let g:neocomplete#enable_smart_case = 1
    let g:neocomplete#enable_auto_delimeter = 1
    let g:neocomplete#max_list = 15
    let g:neocomplete#force_overwrite_completefunc = 1

    let g:neocomplete#sources#dictionary#dictionaries = {
        \ 'default' : '',
        \ 'vimshell' : $HOME . '/.vimshell_hist',
        \ 'scheme' : $HOME . '/.gosh_completions'
        \ }

    if !exists('g:neocomplete#keyword_patterns')
        let g:neocomplete#keyword_patterns = {}
    endif
    let g:neocomplete#keyword_patterns['default'] = '\h\w*'

    "imap <C-k> <Plug>(neosnippet_expand_or_jump)
    "smap <C-k> <Plug>(neosnippet_expand_or_jump)

    "imap <silent><expr><C-k> neosnippet#expandable() ?
        "\ "\<Plug>(neosnippet_expand_or_jump)" : (pumvisible() ?
        "\ "\<C-e>" : "\<Plug>(neosnippet_expand_or_jump)")
    smap <TAB> <Right><Plug>(neosnippet_jump_or_expand)
    inoremap <expr><C-g> neocomplete#undo_completion()
    "inoremap <expr><C-l> neocomplete#complete_common_string()
    inoremap <expr><s-CR> pumvisible() ? neocomplete#smart_close_popup() . "\<CR>" : "\<CR>"

    function! CleverCr()
        if pumvisible()
            if neosnippet#expandable()
                let exp = "\<Plug>(neosnippet_expand)"
                return exp . neocomplete#smart_close_popup()
            else
                return neocomplete#smart_close_popup()
            endif
        else
            return "\<CR>"
        endif
    endfunction

    imap <expr> <CR> CleverCr()
    inoremap <expr><BS> neocomplete#smart_close_popup() . "\<C-h>"
    inoremap <expr><C-y> neocomplete#smart_close_popup()

    inoremap <expr><TAB> pumvisible() ? "\<C-n>" : "\<TAB>"
    inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<TAB>"

    function! CleverTab()
        if pumvisible()
            return "\<C-n>"
        endif
        let substr = strpart(getline('.'), 0, col('.') - 1)
        let substr = matchstr(substr, '[^ \t]*$')
        if strlen(substr) == 0
            " nothing to match on empty string
            return "\<Tab>"
        else
            " existing text matching
            if neosnippet#expandable_or_jumpable()
                return "\<Plug>(neosnippet_expand_or_jump)"
            else
                return neocomplete#start_manual_complete()
            endif
        endif
    endfunction

    imap <expr> <Tab> CleverTab()

    if !exists('g:neocomplete#sources#omni#input_patterns')
        let g:neocomplete#sources#omni#input_patterns = {}
    endif
    let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
    let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'
    let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
    let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'
    let g:neocomplete#sources#omni#input_patterns.ruby = '[^. *\t]\.\h\w*\|\h\w*::'

endif

" neosnippet
if isdirectory(expand("~/.vim/bundle/neosnippet"))

    " Enable neosnippet snipmate compatibility mode
    let g:neosnippet#enable_snipmate_compatibility = 1

    " Use honza's snippets.
    let g:neosnippet#snippets_directory='~/.vim/bundle/vim-snippets/snippets'

    " For snippet_complete marker.
    if has('conceal')
        set conceallevel=2 concealcursor=i
    endif

endif

" NERDTree
if isdirectory(expand("~/.vim/bundle/nerdtree"))
    let NERDTreeShowBookmarks=1
    let NERDTreeIgnore=['\.py[cd]$', '\~$', '\.swo$', '\.swp$', '^\.git$', '^\.hg$', '^\.svn$', '\.bzr$']
    let NERDTreeChDirMode=0
    let NERDTreeMouseMode=2
    let NERDTreeShowHidden=1
    let NERDTreeWinSize=40
    let NERDTreeMinimalUI=1
    let NERDTreeKeepTreeInNewTab=1
    let g:nerdtree_tabs_open_on_gui_startup=1

    " Open NERDTree when Vim starts
    "autocmd vimenter * NERDTree

    " Only open NERDTree when Vim starts empty
    "autocmd StdinReadPre * let s:std_in=1
    "autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

    " Close vim if the only window left open is a NERDTree
    "autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif

endif

" PDV
if isdirectory(expand("~/.vim/bundle/pdv"))
    let g:pdv_template_dir = $HOME . "/.vim/bundle/pdv/templates_snip"
endif

" php.vim
if isdirectory(expand("~/.vim/bundle/php.vim"))
    function! PhpSyntaxOverride()
        hi! def link phpDocTags  phpDefine
        hi! def link phpDocParam phpType
    endfunction

    augroup phpSyntaxOverride
        autocmd!
        autocmd FileType php call PhpSyntaxOverride()
    augroup END
endif

" phpcomplete
if isdirectory(expand("~/.vim/bundle/phpcomplete.vim"))
    let g:phpcomplete_parse_docblock_comments = 0
endif

" rainbow
if isdirectory(expand("~/.vim/bundle/rainbow"))
    let g:rainbow_active = 1
endif

" smooth-scroll
if isdirectory(expand("~/.vim/bundle/vim-smooth-scroll/"))
    noremap <silent> <c-u> :call smooth_scroll#up(&scroll, 0, 4)<CR>
    noremap <silent> <c-d> :call smooth_scroll#down(&scroll, 0, 4)<CR>
    noremap <silent> <c-b> :call smooth_scroll#up(&scroll*2, 0, 8)<CR>
    noremap <silent> <c-f> :call smooth_scroll#down(&scroll*2, 0, 8)<CR>
endif

" SuperTab
if isdirectory(expand("~/.vim/bundle/supertab"))
    let g:SuperTabDefaultCompletionType = "context"
    let g:SuperTabContextDefaultCompletionType = "<c-x><c-o>"
    let g:SuperTabClosePreviewOnPopupClose = 1
endif

" Syntastic
if isdirectory(expand("~/.vim/bundle/syntastic"))
    let g:syntastic_php_checkers=['php', 'phpcs']
    let g:syntastic_php_phpcs_args='--standard=PSR2 -n'
endif

" tagbar
if isdirectory(expand("~/.vim/bundle/tagbar"))
    autocmd FileType * nested :call tagbar#autoopen(0)
    let g:tagbar_autoclose = 0
    let g:easytags_async = 1
endif

" Ultisnips
if isdirectory(expand("~/.vim/bundle/ultisnips"))
    let g:UltiSnipsExpandTrigger       ="<tab>"
    let g:UltiSnipsJumpForwardTrigger  ="<tab>"
    let g:UltiSnipsJumpBackwardTrigger ="<s-tab>"
endif

" Undotree
if isdirectory(expand("~/.vim/bundle/undotree"))
    "nnoremap <leader>u :UndotreeToggle<cr>
endif

" Unite.vim
if isdirectory(expand("~/.vim/bundle/unite.vim"))

    "call unite#filters#matcher_default#use(['matcher_fuzzy', 'matcher_project_ignore_files'])
    call unite#filters#matcher_default#use(['matcher_fuzzy'])
    call unite#filters#sorter_default#use(['sorter_rank'])
    "call unite#custom#source('file_rec,file_rec/async', 'ignore_pattern', join([
                "\ '.git/',
                "\ 'node_modules/',
                "\ 'storage/',
                "\ 'vendor/',
                "\], '|'))
    call unite#custom#profile('default', 'context', {
        \ 'direction': 'dynamicbottom'
        \ })

    let g:unite_source_history_yank_enable = 1

    if executable('ag')
        let g:unite_source_grep_command='ag'
        "let g:unite_source_grep_default_opts='--nocolor --line-numbers --nogroup -S -C4'
        "let g:unite_source_grep_default_opts = '-i --hidden --ignore ''.hg'' --ignore ''.svn'' --ignore ''.git'' --ignore ''.bzr'''
        let g:unite_source_grep_default_opts = '--vimgrep -S'
        let g:unite_source_grep_recursive_opt=''

        let g:unite_source_rec_async_command = ['ag', '--follow', '--nocolor', '--nogroup', '--hidden', '-g', '']
    elseif executable('ack')
        let g:unite_source_grep_command='ack'
        let g:unite_source_grep_default_opts='--no-heading --no-color -C4'
        let g:unite_source_grep_recursive_opt=''
    elseif executable('ack-grep')
        let g:unite_source_grep_command='ack-grep'
        let g:unite_source_grep_default_opts='--no-heading --no-color -C4'
        let g:unite_source_grep_recursive_opt=''
    endif

    " Files
    nnoremap <leader>f :Unite -auto-resize -buffer-name=files -start-insert file_rec/async:!<CR>

    " Buffers & MRU
    nnoremap <leader>b :Unite -auto-resize -buffer-name=buffers -quick-match buffer<CR>

    " Ag/Ack
    nnoremap <leader>g :Unite -auto-resize -buffer-name=search -no-quit grep:.<CR>

    " Yank history
    nnoremap <leader>y :Unite -auto-resize -buffer-name=yanks history/yank<CR>

    " Mappings
    nnoremap <leader>m :Unite -auto-resize -buffer-name=mappings mapping<CR>

    " Colorschemes
    nnoremap <leader>c :Unite -auto-resize -buffer-name=colorschemes -auto-preview colorscheme<CR>

endif

" Vdebug
if isdirectory(expand("~/.vim/bundle/vdebug"))
    let g:vdebug_options = {
    \    'server' : '0.0.0.0',
    \    'watch_window_style' : 'expanded',
    \ }
endif

" Vim Indent Guides
if isdirectory(expand("~/.vim/bundle/vim-indent-guides"))
    let g:indent_guides_auto_colors = 0
    let g:indent_guides_start_level = 2
    let g:indent_guides_guide_size = 1
    let g:indent_guides_enable_on_vim_startup = 1
    highlight IndentGuidesOdd  ctermbg=0
    highlight IndentGuidesEven ctermbg=234
endif

" Vim-php-cs-fixer
if isdirectory(expand("~/.vim/bundle/vim-php-cs-fixer"))
    let g:php_cs_fixer_level = "psr2"
endif

" vim-php-manual
if isdirectory(expand("~/.vim/bundle/vim-php-manual"))
    let g:php_manual_online_search_shortcut = "<s-P>"
endif

" Vim-php-namespace
if isdirectory(expand("~/.vim/bundle/vim-php-namespace"))
    autocmd FileType php noremap <Leader>u :call PhpInsertUse()<CR>
    autocmd FileType php noremap <Leader>e :call PhpExpandClass()<CR>
endif

" vim-tmux-navigator
if isdirectory(expand("~/.vim/bundle/vim-tmux-navigator"))

    " seemless moving around between tmux panes and vim splits
    nnoremap <silent> <C-h> :TmuxNavigateLeft<cr>
    nnoremap <silent> <C-j> :TmuxNavigateDown<cr>
    nnoremap <silent> <C-k> :TmuxNavigateUp<cr>
    nnoremap <silent> <C-l> :TmuxNavigateRight<cr>

endif

" YouCompleteMe
if isdirectory(expand("~/.vim/bundle/YouCompleteMe"))

endif

" ZoomWin
if isdirectory(expand("~/.vim/bundle/ZoomWin"))
    nmap <leader>z :ZoomWin<CR>
endif

" vim: set nospell foldmethod=marker foldlevel=0:
