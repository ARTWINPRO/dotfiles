"
"                                    ________
"                                  |\\W#####M\
"                                  |M\\W#####M\
"                                  |#M\\W#####M\
"                                  |##M\\W#####M\
"                                  A###M\\W#####M\
"                         _______,a#####M|\W#####M\
"                         \W############W  \W#####M\
"                          \W##########W    \W#####M\
"                           'YW#####W7'      \W#####M\
"                              ¯¯¯¯¯          ¯¯¯¯¯¯¯¯
"
"           Personal .vimrc file of Jess Archer <jess@jessarcher.com>

"                      Plug definitions and configuration

" vim-plug {{{
"===============================================================================

if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall | source $MYVIMRC
endif

call plug#begin('~/.vim/bundle')

" }}}

" ale {{{
"===============================================================================
Plug 'w0rp/ale'
Plug 'maximbaz/lightline-ale'
let g:ale_completion_enabled = 1
let g:ale_set_balloons = 1
let g:ale_sign_error = '✖'
let g:ale_sign_warning = '!'

let g:ale_php_phpcbf_standard = 'PSR2'
let g:ale_php_phpcs_standard = 'PSR2'
let g:ale_php_cs_fixer_options = '--fixers PSR2'

let g:ale_fixers = {'php': ['php_cs_fixer', 'phpcbf']}

let g:lightline#ale#indicator_checking = "\uf110"
let g:lightline#ale#indicator_warnings = "\uf071"
let g:lightline#ale#indicator_errors = "\uf05e"
let g:lightline#ale#indicator_ok = "\uf00c"
" }}}

" ctrlp.vim {{{
"===============================================================================
Plug 'ctrlpvim/ctrlp.vim'
Plug 'tacahiroy/ctrlp-funky'

if executable('ag')
    let g:ctrlp_user_command = 'ag %s -g "" --hidden --nocolor'
    let g:ctrlp_use_caching = 0
elseif executable('ack-grep')
    let g:ctrlp_user_command = 'ack-grep %s --nocolor -f'
elseif executable('ack')
    let g:ctrlp_user_command = 'ack %s --nocolor -f'
else
    let g:ctrlp_user_command = 'find %s -type f'
endif

let g:ctrlp_map = ''

let g:ctrlp_funky_matchtype = 'path'
"let g:ctrlp_funky_syntax_highlight = 1
let g:ctrlp_funky_nudists = ['php']

nmap <leader>f :CtrlP<CR>
nmap <leader>s :CtrlPFunky<CR>
nmap <leader>b :CtrlPBuffer<CR>
nmap <leader>m :CtrlPMRUFiles<CR>
nmap <leader>v :CtrlP vendor<CR>
" }}}

" ag.vim  {{{
"===============================================================================
Plug 'rking/ag.vim', { 'on': 'Ag' }

let g:ag_working_path_mode="r"
" }}}

" IndexedSearch {{{
"===============================================================================
Plug 'vim-scripts/IndexedSearch' " shows 'Nth match out of M' at every search
" }}}

" LargeFile {{{
"===============================================================================
let g:LargeFile = 1
Plug 'vim-scripts/LargeFile' " Edit large files quickly
" }}}

" vim-visual-star-search {{{
"===============================================================================
Plug 'nelstrom/vim-visual-star-search'  " Start a * or # search from a visual block
" }}}

" supertab {{{
"===============================================================================
Plug 'ervandew/supertab'               " Perform all your vim insert mode completions with Tab

" }}}

" ultisnips {{{
"===============================================================================
if has('python')
    Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets' " The ultimate snippet solution for Vim

    let g:UltiSnipsExpandTrigger       ="<tab>"
    let g:UltiSnipsJumpForwardTrigger  ="<tab>"
    let g:UltiSnipsJumpBackwardTrigger ="<s-tab>"
endif
" }}}

" gutentags {{{
Plug 'ludovicchabant/vim-gutentags'
" }}}

" tagbar {{{
"===============================================================================
Plug 'majutsushi/tagbar'

autocmd FileType * nested :call tagbar#autoopen(0) " Open tagbar automatically for supported types
let g:tagbar_autoclose = 0 " Automatically close after jumping to a tag
let g:easytags_async = 1
let g:tagbar_sort = 0 " Sort by name rather than order of appearance in the file
let g:tagbar_show_linenumbers=1 " Show absolute line numbers
" }}}

" vim-autoclose {{{
Plug 'Townk/vim-autoclose'
" }}}

" vim-fugitive {{{
"===============================================================================
Plug 'tpope/vim-fugitive'              " a Git wrapper so awesome, it should be illegal
" }}}

" vim-gitgutter {{{
"===============================================================================
Plug 'airblade/vim-gitgutter'          " A Vim plugin which shows a git diff in the gutter (sign column) and stages/reverts hunks.

set updatetime=100
let g:gitgutter_max_signs=1000
" }}}

" vim-tmux-navigator {{{
"===============================================================================
Plug 'christoomey/vim-tmux-navigator'     " Seamless navigation between tmux panes and vim splits

" seemless moving around between tmux panes and vim splits
nnoremap <silent> <C-h> :TmuxNavigateLeft<cr>
nnoremap <silent> <C-j> :TmuxNavigateDown<cr>
nnoremap <silent> <C-k> :TmuxNavigateUp<cr>
nnoremap <silent> <C-l> :TmuxNavigateRight<cr>
" }}}

" vim-tmux-focus-events {{{
"===============================================================================
Plug 'tmux-plugins/vim-tmux-focus-events' " Make terminal vim and tmux work better together.
" }}}

" vim-commentary {{{
"===============================================================================
Plug 'tpope/vim-commentary'
" }}}

" vim-unimpaired - pairs of handy bracket mappings {{{
"===============================================================================
Plug 'tpope/vim-unimpaired'
autocmd VimEnter * unmap <silent><expr> co
" }}}

" vim-vue - Syntax highlight for Vue.js components {{{
"===============================================================================
Plug 'posva/vim-vue'
autocmd FileType vue syntax sync fromstart
" }}}

" syntastic {{{
"===============================================================================
" Plug 'scrooloose/syntastic'            " Syntax checking hacks for vim

" let g:syntastic_mode_map = {
"     \ "mode": "passive",
" \ }
" let g:syntastic_php_checkers = ['php', 'phpcs']
" let g:syntastic_php_phpcs_args = '--standard=PSR2 -n'
" let g:syntastic_error_symbol = ' ✖'
" let g:syntastic_style_error_symbol = ' ✖'
" let g:syntastic_warning_symbol = ' !'
" let g:syntastic_style_warning_symbol = ' !'

" " Disable syntastic on a per buffer basis
" function! SyntasticDisableBuffer()
"     let b:syntastic_skip_checks = 1
"     SyntasticReset
"     echo 'Syntastic disabled for this buffer'
" endfunction

" command! SyntasticDisableBuffer call SyntasticDisableBuffer()
" }}}

" vdebug {{{
"===============================================================================
Plug 'joonty/vdebug', { 'for': 'php' } " Multi-language DBGP debugger client for Vim (PHP, Python, Perl, Ruby, etc.)

let g:vdebug_options = {
\    'server' : '0.0.0.0',
\    'watch_window_style' : 'expanded',
\ }
" }}}

" vim-json-line-format {{{
"===============================================================================
Plug 'axiaoxin/vim-json-line-format'
" }}}

" lightline.vim {{{
"===============================================================================
Plug 'itchyny/lightline.vim'

let g:lightline = {}

let g:lightline.fname = ''

let g:lightline.active = {
    \ 'left': [
        \ [ 'mode', 'paste', 'spell' ],
        \ [ 'fugitive', 'filename' ],
        \ [ 'ctrlpmark', 'gutentags' ]
    \ ],
    \ 'right': [
        \ [ 'linter_checking', 'linter_errors', 'linter_warnings', 'linter_ok', 'lineinfo' ],
        \ [ 'percent' ],
        \ [ 'fileformat', 'fileencoding', 'filetype', 'indent' ]
    \ ]
\ }

let g:lightline.colorscheme = 'wombat'

" let g:lightline.component_expand = {
"     \ 'syntastic': 'SyntasticStatuslineFlag',
" \ }

let g:lightline.component_expand = {
    \ 'linter_checking': 'lightline#ale#checking',
    \ 'linter_warnings': 'lightline#ale#warnings',
    \ 'linter_errors': 'lightline#ale#errors',
    \ 'linter_ok': 'lightline#ale#ok',
\ }

let g:lightline.component_function = {
    \ 'ctrlpmark': 'CtrlPMark',
    \ 'fileencoding': 'LightLineFileencoding',
    \ 'fileformat': 'LightLineFileformat',
    \ 'filename': 'LightLineFilename',
    \ 'filetype': 'LightLineFiletype',
    \ 'fugitive': 'LightLineFugitive',
    \ 'gutentags': 'LightLineGutentags',
    \ 'mode': 'LightLineMode',
    \ 'indent': 'LightLineIndent'
\ }

" let g:lightline.component_type = {
"     \ 'syntastic': 'error'
" \ }

let g:lightline.component_type = {
    \ 'linter_checking': 'left',
    \ 'linter_warnings': 'warning',
    \ 'linter_errors': 'error',
    \ 'linter_ok': 'left',
\ }

let g:lightline.separator = { 'left': '', 'right': '' }
let g:lightline.subseparator = { 'left': '', 'right': '' }


" let g:lightline = {
"     \ 'active': {
"         \ 'left': [
"             \ [ 'mode', 'paste', 'spell' ],
"             \ [ 'fugitive', 'filename' ],
"             \ [ 'ctrlpmark', 'gutentags' ],
"         \ ],
"         \ 'right': [
"             \ [ 'syntastic', 'lineinfo' ],
"             \ [ 'percent' ],
"             \ [ 'fileformat', 'fileencoding', 'filetype', 'indent' ],
"         \ ]
"     \ },
"     \ 'colorscheme': 'wombat',
"     \ 'component_expand': {
"         \ 'syntastic': 'SyntasticStatuslineFlag',
"     \ },
"     \ 'component_function': {
"         \ 'ctrlpmark': 'CtrlPMark',
"         \ 'fileencoding': 'LightLineFileencoding',
"         \ 'fileformat': 'LightLineFileformat',
"         \ 'filename': 'LightLineFilename',
"         \ 'filetype': 'LightLineFiletype',
"         \ 'fugitive': 'LightLineFugitive',
"         \ 'gutentags': 'LightLineGutentags',
"         \ 'mode': 'LightLineMode',
"         \ 'indent': 'LightLineIndent',
"     \ },
"     \ 'component_type': {
"         \ 'syntastic': 'error',
"     \ },
"     \ 'separator': { 'left': '', 'right': '' },
"     \ 'subseparator': { 'left': '', 'right': '' }
" \ }

function! CtrlPMark()
    if expand('%:t') =~ 'ControlP' && has_key(g:lightline, 'ctrlp_item')
        call lightline#link('iR'[g:lightline.ctrlp_regex])
        return lightline#concatenate([g:lightline.ctrlp_prev, g:lightline.ctrlp_item, g:lightline.ctrlp_next], 0)
    else
        return ''
    endif
endfunction

let g:ctrlp_status_func = {
    \ 'main': 'CtrlPStatusFunc_1',
    \ 'prog': 'CtrlPStatusFunc_2',
\ }

function! CtrlPStatusFunc_1(focus, byfname, regex, prev, item, next, marked)
    let g:lightline.ctrlp_regex = a:regex
    let g:lightline.ctrlp_prev = a:prev
    let g:lightline.ctrlp_item = a:item
    let g:lightline.ctrlp_next = a:next
    return lightline#statusline(0)
endfunction

function! CtrlPStatusFunc_2(str)
    return lightline#statusline(0)
endfunction

function! LightLineMode()
    let fname = expand('%:t')
    return fname =~ '__Tagbar__' ? 'Tagbar' :
        \ fname == 'ControlP' ? 'CtrlP' :
        \ fname == '__Gundo__' ? 'Gundo' :
        \ fname == '__Gundo_Preview__' ? 'Gundo Preview' :
        \ fname =~ 'NERD_tree' ? 'NERDTree' :
        \ &ft == 'unite' ? 'Unite' :
        \ &ft == 'vimfiler' ? 'VimFiler' :
        \ &ft == 'vimshell' ? 'VimShell' :
        \ winwidth(0) > 60 ? lightline#mode() : ''
endfunction

function! LightLineModified()
    return &ft =~ 'help' ? '' : &modified ? '✎' : &modifiable ? '' : '-'
endfunction

function! LightLineReadonly()
    return &ft !~? 'help' && &readonly ? '' : ''
endfunction

function! LightLineFilename()
    let fname = expand('%:t')
    return fname == 'ControlP' && has_key(g:lightline, 'ctrlp_item') ? g:lightline.ctrlp_item :
        \ fname =~ '__Tagbar__' ? '' :
        \ fname =~ '__Gundo\|NERD_tree' ? '' :
        \ &ft == 'vimfiler' ? vimfiler#get_status_string() :
        \ &ft == 'unite' ? unite#get_status_string() :
        \ &ft == 'vimshell' ? vimshell#get_status_string() :
        \ ('' != LightLineReadonly() ? LightLineReadonly() . ' ' : '') .
        \ ('' != fname ? fname : '[No Name]') .
        \ ('' != LightLineModified() ? ' ' . LightLineModified() : '')
endfunction

function! LightLineFileformat()
    return winwidth(0) > 70 ? &fileformat : ''
endfunction

function! LightLineFiletype()
    return winwidth(0) > 70 ? (&filetype !=# '' ? &filetype : 'no ft') : ''
endfunction

function! LightLineFugitive()
    try
        if expand('%:t') !~? 'Tagbar\|Gundo\|NERD' && &ft !~? 'vimfiler' && exists('*fugitive#head')
            let mark = ' '  " edit here for cool mark
            let branch = fugitive#head()
            return branch !=# '' ? mark.branch : ''
        endif
    catch
    endtry
    return ''
endfunction

function! LightLineFileencoding()
  return winwidth(0) > 70 ? (&fenc !=# '' ? &fenc : &enc) : ''
endfunction

function! LightLineIndent()
    return winwidth(0) > 70 ? (&expandtab == 1 ? 'spaces[' . &shiftwidth . ']' : 'tabs[' . &tabstop . ']') : ''
endfunction

function! LightLineGutentags()
    return gutentags#statusline('Generating tags...')
endfunction

let g:tagbar_status_func = 'TagbarStatusFunc'

function! TagbarStatusFunc(current, sort, fname, ...) abort
    let g:lightline.fname = a:fname
    return lightline#statusline(0)
endfunction

" augroup AutoSyntastic
"     autocmd!
"     autocmd BufWritePost *.php,*.js call s:syntastic()
" augroup END

" function! s:syntastic()
"     SyntasticCheck
"     call lightline#update()
" endfunction

" }}}

" pdv {{{
"===============================================================================
Plug 'tobyS/pdv', { 'for': 'php' } | Plug 'tobyS/vmustache' " PHP Documentor for Vim - Generates PHP docblocks

let g:pdv_template_dir = $HOME . "/.vim/bundle/pdv/templates_snip"
" }}}

" php.vim {{{
"===============================================================================
Plug 'StanAngeloff/php.vim'            " Up-to-date PHP syntax file

function! PhpSyntaxOverride()
    hi! def link phpDocTags  phpDefine
    hi! def link phpDocParam phpType
endfunction

augroup phpSyntaxOverride
    autocmd!
"    autocmd FileType php call PhpSyntaxOverride()
augroup END
" }}}

" phpcomplete.vim {{{
"===============================================================================
Plug 'shawncplus/phpcomplete.vim', { 'for': 'php' }     " Improved PHP omni-completion

let g:phpcomplete_parse_docblock_comments = 0
" }}}

" PHP-Indenting-for-VIm {{{
"===============================================================================
Plug '2072/PHP-Indenting-for-VIm'      " The official VIm indent script for PHP
" }}}

" vim-php-namespace {{{
"===============================================================================
Plug 'arnaud-lb/vim-php-namespace'

function! IPhpInsertUse()
    call PhpInsertUse()
    call feedkeys('a',  'n')
endfunction

"autocmd FileType php inoremap <Leader>u <Esc>:call IPhpInsertUse()<CR>
autocmd FileType php noremap <Leader>u :call PhpInsertUse()<CR>

function! IPhpExpandClass()
    call PhpExpandClass()
    call feedkeys('a', 'n')
endfunction

"autocmd FileType php inoremap <Leader>e <Esc>:call IPhpExpandClass()<CR>
autocmd FileType php noremap <Leader>e :call PhpExpandClass()<CR>
" }}}

" html5.vim {{{
"===============================================================================
Plug 'othree/html5.vim'                " HTML5 omnicomplete and syntax
" }}}

" emmet-vim {{{
"===============================================================================
Plug 'mattn/emmet-vim'                 " emmet for vim
" }}}

" scss-syntax.vim {{{
"===============================================================================
Plug 'cakebaker/scss-syntax.vim'       " Vim syntax file for scss
" }}}

" vim-css3-syntax {{{
"===============================================================================
Plug 'hail2u/vim-css3-syntax'          " Add CSS3 syntax support to vim's built-in `syntax/css.vim`.
" }}}

" vim-blade {{{
"===============================================================================
Plug 'jwalton512/vim-blade'            " Vim syntax highlighting for Blade templates
" }}}

" vim-javascript {{{
"===============================================================================
Plug 'pangloss/vim-javascript'         " Vastly improved Javascript indentation and syntax support in Vim.
" }}}

" vim-mustache-handlebars {{{
"===============================================================================
Plug 'mustache/vim-mustache-handlebars' " mustache and handlebars mode for vim
" }}}

" base16-vim {{{
"===============================================================================
Plug 'chriskempson/base16-vim'         " Base16 for Vim
" }}}

" splitjoin.vim {{{
"===============================================================================
Plug 'AndrewRadev/splitjoin.vim'       " A vim plugin that simplifies the transition between multiline and single-line code
" }}}

" vim-repeat {{{
"===============================================================================
Plug 'tpope/vim-repeat'                " enable repeating supported plugin maps with .
" }}}

" vim-surround {{{
"===============================================================================
Plug 'tpope/vim-surround'              " quoting/parenthesizing made simple
" }}}

" vim-lion {{{
"===============================================================================
Plug 'tommcdo/vim-lion'                " A simple alignment operator for Vim text editor
let g:lion_squeeze_spaces = 1 " Remove as many spaces as possible when aligning
" }}}

" indentLine {{{
"===============================================================================
Plug 'Yggdroot/indentLine'              "  A vim plugin to display the indention levels with thin vertical lines

" let g:indentLine_faster = 1
let g:indentLine_char = '┊'
let g:indentLine_first_char = '┊'
let g:indentLine_color_term = 237
let g:indentLine_showFirstIndentLevel = 1
" }}}

" vim-bbye {{{
"===============================================================================
Plug 'moll/vim-bbye'                    " Delete buffers and close files in Vim without closing your windows or messing up your layout.
" }}}

" vim-hardtime {{{
"===============================================================================
Plug 'takac/vim-hardtime'               " Plugin to help you stop repeating the basic movement key

let g:hardtime_default_on = 0
let g:hardtime_showmsg = 1
let g:hardtime_allow_different_key = 1
let g:hardtime_maxcount = 4
" }}}

" vim-smoothscroll {{{
"===============================================================================
Plug 'terryma/vim-smooth-scroll'

noremap <silent> <c-u> :call smooth_scroll#up(&scroll, 0, 4)<CR>
noremap <silent> <c-d> :call smooth_scroll#down(&scroll, 0, 4)<CR>
noremap <silent> <c-b> :call smooth_scroll#up(&scroll*2, 0, 8)<CR>
noremap <silent> <c-f> :call smooth_scroll#down(&scroll*2, 0, 8)<CR>
" }}}

" vim-php-manual {{{
"===============================================================================
"let g:php_manual_online_search_shortcut = "<s-P>"
" }}}

" Localvimrc {{{
"===============================================================================
Plug 'embear/vim-localvimrc'
let g:localvimrc_persistent = 2
" }}}

" ZoomWin {{{
"nmap <leader>z :ZoomWin<CR>
" }}}

" NERDTree {{{
"===============================================================================
Plug 'scrooloose/nerdtree'

let NERDTreeShowHidden=1
let NERDTreeMinimalUI=1

" Open NERDTree automatically when vim starts up and no files were specified
autocmd StdinReadPre * let s:std_in=1
"autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | wincmd p | endif
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | endif

" Close vim automatically if the only window left open is a NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
" }}}

" nerdtree-git-plugin {{{
"===============================================================================
Plug 'Xuyuanp/nerdtree-git-plugin'
" }}}

" vim-devicons {{{
"===============================================================================
Plug 'ryanoasis/vim-devicons'
Plug 'tiagofumo/vim-nerdtree-syntax-highlight'
let g:WebDevIconsUnicodeDecorateFolderNodes = 1
let g:DevIconsEnableFoldersOpenClose = 1
let g:DevIconsEnableFolderExtensionPatternMatching = 1
" }}}

" apiblueprint.vim {{{
"===============================================================================
Plug 'kylef/apiblueprint.vim'
" }}}

" vim-argwrap {{{
"===============================================================================
Plug 'FooSoft/vim-argwrap'
"let g:argwrap_tail_comma = 1
let g:argwrap_tail_comma_braces = '['
nnoremap <silent> <leader>a :ArgWrap<CR>
" }}}

" vim-wintabs {{{
"===============================================================================
Plug 'zefei/vim-wintabs'
Plug 'zefei/vim-wintabs-powerline'

let g:wintabs_ui_buffer_name_format = ' %n %t '
" }}}

" vim-pasta {{{
"===============================================================================
Plug 'sickill/vim-pasta'

" Add CtrlP to the default list of disabled filetypes
let g:pasta_disabled_filetypes = ["python", "coffee", "markdown", "yaml", "slim", "nerdtree", "netrw", "startify", "ctrlp"]
" }}}

call plug#end()

" vim: set nospell foldmethod=marker foldlevel=0:
